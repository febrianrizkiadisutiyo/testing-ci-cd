# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege


name: Build and Deploy to Cloud Run

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: example-project-first-1234 # TODO: update Google Cloud project id
  GAR_LOCATION: asia-southeast2 # TODO: update Artifact Registry location
  GAR_REPOSITORY_NAME: image-registry-ex # TODO: update Artifact Registry Repository name
  SERVICE: github-actions-ex # TODO: update Cloud Run service name
  REGION: asia-southeast2 # TODO: update Cloud Run service region

jobs:
  deploy:
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}"

      - name: Configure Docker to use gcloud
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # - name: Set up additional credentials
      #   run: |
      #     echo "${{ secrets.CREDENTIALS_JSON }}" > credentials.json
      #     echo "${{ secrets.SERVICEACCOUNTKEY_JSON }}" > serviceAccountKey.json
      #     echo "${{ secrets.TOKEN_JSON }}" > token.json
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.SERVICEACCOUNTKEY_JSON }}
          credentials: ${{ secrets.CREDENTIALS_JSON }}
          token: ${{ secrets.TOKEN_JSON }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

# name: Build and Deploy to Cloud Run

# on:
#   push:
#     branches: ["main"]

# env:
#   PROJECT_ID: example-project-first-1234 # TODO: update Google Cloud project id
#   GAR_LOCATION: asia-southeast2 # TODO: update Artifact Registry location
#   GAR_REPOSITORY_NAME: image-registry-ex # TODO: update Artifact Registry Repository name
#   SERVICE: github-actions-ex # TODO: update Cloud Run service name
#   REGION: asia-southeast2 # TODO: update Cloud Run service region
#   PORT: 8080

# jobs:
#   deploy:
#     permissions:
#       contents: "read"
#       id-token: "write"

#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Set up Google Cloud credentials
#         id: auth
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: "${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}"

#       - name: Configure Docker to use gcloud
#         run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

#       - name: Set up additional credentials
#         run: |
#           echo "${{ secrets.CREDENTIALS_JSON }}" > credentials.json
#           echo "${{ secrets.SERVICEACCOUNTKEY_JSON }}" > serviceAccountKey.json
#           echo "${{ secrets.TOKEN_JSON }}" > token.json

#       - name: Build and Push Container
#         run: |
#           docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./
#           docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

#       - name: Deploy to Cloud Run
#         id: deploy
#         uses: google-github-actions/deploy-cloudrun@v2
#         with:
#           service: ${{ env.SERVICE }}
#           region: ${{ env.REGION }}
#           image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}
#           env_vars: PORT=${{ env.PORT }}

#       - name: Show Output
#         run: echo ${{ steps.deploy.outputs.url }}